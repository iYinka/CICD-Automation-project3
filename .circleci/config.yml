version: 2.1

orbs:
    slack: circleci/slack@4.10.1

commands:
    destroy-environment:
        description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
        parameters:
            workflow_id:
                type: string
        steps:
            - run:
                  name: Destroy environments
                  when: on_fail
                  command: |
                      echo "Destroying environment: << parameters.workflow_id >>"

                      aws s3 rm s3://udapeople-<< parameters.workflow_id >> --recursive
                      aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>
                      aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>

    revert-migrations:
        description: Revert the last migration if successfully run in the current workflow.
        parameters:
            # Add parameter here
        steps:
            - run:
                  name: Revert migrations
                  # Add when this will run
                  command: |
                      # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
                      SUCCESS = 1
                      if(( $SUCCESS==1 ));
                      then
                      #  cd ~/project/backend
                      #  npm install
                      #  Add revert code here. You can find this in the Getting Started section.
                        exit 1
                      fi

jobs:
    build-frontend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                  keys: [frontend-build]
            - run:
                  name: Build front-end
                  command: |
                      # Your code here
                      cd frontend
                      npm install
                      npm run build
            - save_cache:
                  paths: [frontend/node_modules]
                  key: frontend-build

    build-backend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                  keys: [backend-build]
            - run:
                  name: Back-end build
                  command: |
                      # Your code here
                      cd backend
                      npm install
                      npm run build
            - save_cache:
                  paths: [backend/node_modules]
                  key: backend-build

    test-frontend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            # Checkout code from git
            - checkout
            # Restore from cache
            - restore_cache:
                  keys: [test-frontend]
            # Your job code here
            - run:
                  name: Run Frontend Test
                  command: |
                      cd frontend
                      npm install
                      npm run test
            - save_cache:
                  paths: [frontend/node_modules]
                  key: test-frontend

    test-backend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            # Checkout code from git
            - checkout
            # Restore from cache
            - restore_cache:
                  keys: [test-backend]
            # Your job code here
            - run:
                  name: Run Backend Test
                  command: |
                      cd backend
                      npm install
                      npm run test
            - save_cache:
                  paths: [backend/node_modules]
                  key: test-backend

    scan-frontend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            # Restore from cache
            - restore_cache:
                  keys: [scan-frontend]
            - run:
                  name: Run Frontend Scan
                  command: |
                      cd frontend
                      npm install
                      #  npm install oauth-sign@^0.9.0
                      # npm audit --audit-level=critical  # ---> To check vunerabilities
                      npm audit fix --audit-level=critical     #To fix vulnerablilities
            - save_cache:
                  paths: [frontend/node_modules]
                  key: scan-frontend

    scan-backend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            # Restore from cache
            - restore_cache:
                  keys: [scan-backend]
            - run:
                  name: Run Backend Scan
                  command: |
                      cd backend
                      npm install
                      # npm install oauth-sign@^0.9.0
                      # npm audit --audit-level=critical  # ---> To check vulnerabilities
                      npm audit fix --audit-level=critical   #To fix vulnerablilities
            - save_cache:
                  paths: [backend/node_modules]
                  key: scan-backend

    deploy-infrastructure:
        docker:
            - image: amazon/aws-cli
        steps:
            # Checkout code from git
            - checkout
            - run:
                  name: Dependencies Installation
                  command: |
                      yum install -y tar gzip curl
            - run:
                  name: Ensure back-end infrastructure exists
                  command: |
                      aws cloudformation deploy \
                        --template-file .circleci/files/backend.yml \
                        --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                        --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                        --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}

                        #--tags project=your-tag \
                        # --stack-name "your back-end stack name with workflow id" \
                        # --parameter-overrides ID="your workflow id"
            - run:
                  name: Ensure front-end infrastructure exist
                  command: |
                      aws cloudformation deploy \
                        --template-file .circleci/files/frontend.yml \
                        --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                        --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                        --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}

                        #--tags project=your-tag \
                        # --stack-name "your front-end stack name with workflow id" \
                        # --parameter-overrides ID="your workflow id"
            - run:
                  name: Add back-end ip to ansible inventory
                  command: |
                      aws ec2 describe-instances \
                        --query 'Reservations[*].Instances[*].PublicIpAddress' \
                        --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                        --output text >> .circleci/ansible/inventory.txt
            - persist_to_workspace:
                  root: ~/
                  paths:
                      - project/.circleci/ansible/inventory.txt
            - destroy-environment:
                  workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

    configure-infrastructure:
        docker:
            - image: python:3.7-alpine3.11
        steps:
            - checkout
            - add_ssh_keys:
                  fingerprints:
                      ["f1:8b:da:e3:99:c6:5f:85:de:d5:a0:d5:5e:a9:92:62"]
            # attach workspace
            - attach_workspace:
                  at: .
            - run:
                  name: Install dependencies
                  command: |
                      apk add --update ansible
                      pip install awscli
            - run:
                  name: Configure server
                  command: |
                      cd .circleci/ansible
                      ansible-playbook -i inventory.txt configure-server.yml
            - destroy-environment:
                  workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

    run-migrations:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                  keys: [backend-build]
            - run:
                  name: Run migrations
                  command: |
                      cd backend
                      npm install
                      npm audit fix --force
                      npm run migrations > migrations_dump.txt

            - run:
                  name: Send migration results to kvdb
                  command: |
                      if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
                      then
                          sudo apt-get update && sudo apt-get install -y ca-certificates
                          curl https://kvdb.io/8aoRb9Bk9MmZqhVEqMQh3n/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
                      fi
            - destroy-environment:
                  workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

    deploy-frontend:
        docker:
            - image: amazon/aws-cli
        steps:
            - checkout
            - attach_workspace:
                  at: .
            - run:
                  name: Install AWS dependencies
                  command: |
                      sudo apt-get update && sudo apt-get install -yy less
                      curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                      unzip awscliv2.zip
                      sudo ./aws/install
            - run:
                  name: Get backend url
                  command: |
                      export BACKEND_IP=$(
                      aws ec2 describe-instances \
                      --query 'Reservations[*].Instances[*].PublicIpAddress' \
                      --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \ --output text)
                      export API_URL="http://${BACKEND_IP}:3030"
                      echo "API_URL = ${API_URL}"
                      echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
                      cat frontend/.env
            - run:
                  name: Deploy frontend objects
                  command: |
                      cd frontend
                      npm install
                      npm run build
                      tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
                      aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            - destroy-environment:
                  workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

    #     deploy-backend:
    #         docker:
    #             # Docker image here that supports Ansible
    #         steps:
    #             # Checkout code from git
    #             # Add ssh keys with fingerprint
    #             # attach workspace
    #             - run:
    #                   name: Install dependencies
    #                   command: |
    #                       # your code here
    #             - run:
    #                   name: Deploy backend
    #                   command: |
    #                       # your code here
    #             # Here's where you will add some code to rollback on failure

    #     smoke-test:
    #         docker:
    #             # Lightweight Docker image
    #         steps:
    #             # Checkout code from git
    #             - run:
    #                   name: Install dependencies
    #                   command: |
    #                       # your code here
    #             - run:
    #                   name: Get backend url
    #                   command: |
    #                       # your code here
    #             - run:
    #                   name: Backend smoke test.
    #                   command: |
    #                       # your code here
    #             - run:
    #                   name: Frontend smoke test.
    #                   command: |
    #                       # your code here
    #             # Here's where you will add some code to rollback on failure

    #     cloudfront-update:
    #         docker:
    #             # Docker image here that supports AWS CLI
    #         steps:
    #             # Checkout code from git
    #             - run:
    #                   name: Install dependencies
    #                   command: |
    #                       # your code here
    #             - run:
    #                   name: Update cloudfront distribution
    #                   command: |
    #                       # your code here
    #             # Here's where you will add some code to rollback on failure

    # cleanup:
    #     docker:
    #         # Docker image here
    #     steps:
    #         # Checkout code from git
    #         - run:
    #               name: Get old stack workflow id
    #               command: |
    #                   # your code here
    #                   export OldWorkflowID="the id here"
    #                   export STACKS=[] #put the list of stacks here
    #         - run:
    #               name: Remove old stacks and files
    #               command: |
    #                   if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
    #                   then
    #                     # your code here
    #                   fi

    notify:
        docker:
            - image: "cimg/base:stable"
        steps:
            - slack/notify:
                  custom: |
                      {
                          "blocks": [
                          {
                              "type": "section",
                              "fields": [
                              {
                                  "type": "plain_text",
                                  "text": "Job upload successful",
                                  "emoji": true
                              }
                              ]
                          }
                          ]
                      }
                  event: always

workflows:
    default:
        jobs:
            - build-frontend
            - build-backend
            - test-frontend:
                  requires: [build-frontend]
            - test-backend:
                  requires: [build-backend]
            - scan-backend:
                  requires: [build-backend]
            - scan-frontend:
                  requires: [build-frontend]
            - deploy-infrastructure:
                  requires:
                      [test-frontend, test-backend, scan-frontend, scan-backend]
                  filters:
                      branches:
                          only: [master]
            - configure-infrastructure:
                  requires: [deploy-infrastructure]
            - run-migrations:
                  requires: [configure-infrastructure]
            # - deploy-frontend:
            #       requires: [run-migrations]
            # - deploy-backend:
            #       requires: [run-migrations]
            # - smoke-test:
            #       requires: [deploy-backend, deploy-frontend]
            # - cloudfront-update:
            #       requires: [smoke-test]
            # - cleanup:
            #       requires: [cloudfront-update]
    # send-notification:
    #     jobs:
    #         - notify:
    #               context: CICD ALERT
