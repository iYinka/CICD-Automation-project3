version: 2.1

orbs:
    slack: circleci/slack@4.10.1

commands:
    destroy-environment:
        description: Destroy backend and frontend cloudformation stacks given a workflow ID.
        parameters:
            workflow_id:
                type: string
        steps:
            - run:
                  name: Destroy environments
                  when: on_fail
                  command: |
                      echo "Destroying environment: << parameters.workflow_id >>"

                      aws s3 rm s3://udapeople-<< parameters.workflow_id >> --recursive
                      aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>
                      aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>

    revert-migrations:
        description: Revert the last migration if successfully run in the current workflow.
        parameters:
            workflow_id:
                type: string
        steps:
            - run:
                  name: Revert migrations
                  when: on_fail
                  command: |
                      # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
                      SUCCESS=$(curl --insecure https://kvdb.io/QuEYcjh1KXSAftwAssJqaT/migration_<< parameters.workflow_id >>)
                      echo $SUCCESS
                      if(( $SUCCESS==1 ));
                      then
                        cd backend
                        npm install
                        npm run build
                        npm run migrations:revert
                      fi

jobs:
    build-frontend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                  keys: [frontend-build]
            - run:
                  name: Build front-end
                  command: |
                      # Your code here
                      cd frontend
                      npm install
                      npm run build
            - save_cache:
                  paths: [frontend/node_modules]
                  key: frontend-build

    build-backend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                  keys: [backend-build]
            - run:
                  name: Back-end build
                  command: |
                      # Your code here
                      cd backend
                      npm install
                      npm run build
            - save_cache:
                  paths: [backend/node_modules]
                  key: backend-build

    test-frontend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            # Checkout code from git
            - checkout
            # Restore from cache
            - restore_cache:
                  keys: [test-frontend]
            # Your job code here
            - run:
                  name: Run Frontend Test
                  command: |
                      cd frontend
                      npm install
                      npm run test
            - save_cache:
                  paths: [frontend/node_modules]
                  key: test-frontend

    test-backend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            # Checkout code from git
            - checkout
            # Restore from cache
            - restore_cache:
                  keys: [test-backend]
            # Your job code here
            - run:
                  name: Run Backend Test
                  command: |
                      cd backend
                      npm install
                      npm run test
            - save_cache:
                  paths: [backend/node_modules]
                  key: test-backend

    scan-frontend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            # Restore from cache
            - restore_cache:
                  keys: [scan-frontend]
            - run:
                  name: Run Frontend Scan
                  command: |
                      cd frontend
                      npm install
                      #  npm install oauth-sign@^0.9.0
                      # npm audit --audit-level=critical  # ---> To check vunerabilities
                      npm audit fix --audit-level=critical     #To fix vulnerablilities
            - save_cache:
                  paths: [frontend/node_modules]
                  key: scan-frontend

    scan-backend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            # Restore from cache
            - restore_cache:
                  keys: [scan-backend]
            - run:
                  name: Run Backend Scan
                  command: |
                      cd backend
                      npm install
                      # npm install oauth-sign@^0.9.0
                      # npm audit --audit-level=critical  # ---> To check vulnerabilities
                      npm audit fix --audit-level=critical   #To fix vulnerablilities
            - save_cache:
                  paths: [backend/node_modules]
                  key: scan-backend

    deploy-infrastructure:
        docker:
            - image: amazon/aws-cli
        steps:
            # Checkout code from github
            - checkout
            - run:
                  name: Dependencies Installation
                  command: |
                      yum install -y tar gzip curl awscli
            - run:
                  name: Ensure back-end infrastructure exists
                  command: |
                      aws cloudformation deploy \
                        --template-file .circleci/files/backend.yml \
                        --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                        --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                        --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}

                        #--tags project=your-tag \
                        # --stack-name "your back-end stack name with workflow id" \
                        # --parameter-overrides ID="your workflow id"
            - run:
                  name: Ensure front-end infrastructure exist
                  command: |
                      aws cloudformation deploy \
                        --template-file .circleci/files/frontend.yml \
                        --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                        --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                        --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}

                        #--tags project=your-tag \
                        # --stack-name "your front-end stack name with workflow id" \
                        # --parameter-overrides ID="your workflow id"
            - run:
                  name: Add back-end ip to ansible inventory
                  command: |
                      aws ec2 describe-instances \
                        --query 'Reservations[*].Instances[*].PublicIpAddress' \
                        --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                        --output text >> .circleci/ansible/inventory.txt
            - persist_to_workspace:
                  root: .
                  paths:
                      - .circleci/ansible/*
            - destroy-environment:
                  workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

    configure-infrastructure:
        docker:
            - image: python:3.7-alpine3.11
        steps:
            - checkout
            - add_ssh_keys:
                  fingerprints:
                      ["ce:ea:19:fd:f5:e6:0d:a8:83:79:bb:30:41:6a:e6:da"]
            - attach_workspace:
                  at: .
            - run:
                  name: Install Dependencies
                  command: |
                      apk add --update --no-cache tar gzip ansible
                      pip install awscli
            - run:
                  name: Configure server
                  command: |
                      echo ENVIRONMENT=production > backend/.env
                      echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> backend/.env
                      echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> backend/.env
                      echo TYPEORM_HOST=$TYPEORM_HOST >> backend/.env
                      echo TYPEORM_HOST=$TYPEORM_HOST >> backend/.env
                      echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> backend/.env
                      echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> backend/.env
                      echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> backend/.env
                      echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> backend/.env
                      echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> backend/.env

                      cat backend/.env
                      cd .circleci/ansible
                      ansible-playbook -i inventory.txt configure-server.yml
            - persist_to_workspace:
                  root: ~/
                  paths: [project/backend]
            - destroy-environment:
                  workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

    run-migrations:
        docker:
            - image: cimg/node:18.4.0
        steps:
            - checkout
            - run:
                  name: Install dependencies
                  command: |
                      sudo apt-get update && sudo apt-get install -yy less
                      curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                      unzip awscliv2.zip
                      sudo ./aws/install
            - restore_cache:
                  keys: [backend-build]
            - attach_workspace:
                  at: .
            - run:
                  name: Run migrations
                  command: |
                      cd backend
                      npm install --legacy-peer-deps
                      npm run build
                      npm run migrations >> migrations.txt
            - run:
                  name: Send migration results to kvdb
                  command: |
                      if grep -q "has been executed successfully." ~/project/backend/migrations.txt
                      then
                          sudo apt-get update && sudo apt-get install -y ca-certificates
                          curl https://kvdb.io/QuEYcjh1KXSAftwAssJqaT/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
                      fi
            - destroy-environment:
                  workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

    deploy-frontend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - attach_workspace:
                  at: .
            - run:
                  name: Install AWS dependencies
                  command: |
                      sudo apt-get update && sudo apt-get install -yy less
                      curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                      unzip awscliv2.zip
                      sudo ./aws/install
            # - restore_cache:
            #       keys: [frontend-build]
            - run:
                  name: Get backend url
                  command: |
                      export BACKEND_IP=$(
                      aws ec2 describe-instances \
                      --query 'Reservations[*].Instances[*].PublicIpAddress' \
                      --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                      --output text)
                      echo "${BACKEND_IP}"
                      export API_URL="http://${BACKEND_IP}:3030"
                      echo "API_URL = ${API_URL}"

                      echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
                      cat frontend/.env

            - run:
                  name: Deploy frontend objects
                  command: |
                      cd frontend
                      npm install
                      npm run build
                      tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
                      aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            - destroy-environment:
                  workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
            - revert-migrations:
                  workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

    # deploy-backend:
    #     docker:
    #         - image: python:3.7-alpine3.11
    #     steps:
    #         - checkout
    #         - add_ssh_keys:
    #               fingerprints:
    #                   ["ce:ea:19:fd:f5:e6:0d:a8:83:79:bb:30:41:6a:e6:da"]
    #         - attach_workspace:
    #               at: .
    #         - run:
    #               name: View content of inventory.txt
    #               command: cat .circleci/ansible/inventory.txt
    #         - run:
    #               name: Install dependencies
    #               command: |
    #                   apk add --update ansible curl rsync openssh nodejs npm
    #                   pip install awscli
    #                   aws --version
    #         - run:
    #               name: Deploy backend
    #               command: |
    #                   cd backend
    #                   npm i
    #                   npm run build
    #                   cd ..
    #                   tar -C backend -czvf ~/artifact.tar.gz.

    #                   mkdir ~/project/.circleci/ansible/roles/deploy/files
    #                   cp artifact.tar.gz ~/project/.circleci/ansible/roles/deploy/files/
    #                   ls -lh
    #                   ~/project/.circleci/ansible/roles/deploy/files/

    #                   cd .circleci/ansible
    #                   echo "Contents  of the inventory.txt file is -------"
    #                   cat inventory.txt
    #                   ansible-playbook -i inventory.txt deploy-backend.yml
    #         - persist_to_workspace:
    #               root: ~/
    #               paths:
    #                   - project/artifact.tar.gz

    #                   #   echo "Present working directory is -------"
    #                   #   cd .circleci/ansible

    #                   #   echo "Contents  of the inventory.txt file is -------"
    #                   #   cat inventory.txt
    #                   #   ansible-playbook -i inventory.txt deploy-backend.yml -vv
    #         - destroy-environment:
    #               workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
    #         - revert-migrations:
    #               workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
    deploy-backend:
        docker:
            - image: python:3.7-alpine3.11
        steps:
            - checkout
            - add_ssh_keys:
                  fingerprints:
                      ["ce:ea:19:fd:f5:e6:0d:a8:83:79:bb:30:41:6a:e6:da"]
            - attach_workspace:
                  at: .
            - run:
                  name: View content of inventory.txt
                  command: cat .circleci/ansible/inventory.txt
            - run:
                  name: Install dependencies
                  command: |
                      apk add --update  ansible curl rsync openssh nodejs npm
                      pip install awscli
                      aws --version
            #####
            - restore_cache:
                  keys: [backend-build]
            # - persist_to_workspace:
            #       root: ~/
            #       paths:
            #           - project/artifact.tar.gz
            ########
            - run:
                  name: Deploy backend
                  command: |
                      cd backend
                      npm i
                      npm run build
                      cd ..
                      tar -C backend -czvf artifact.tar.gz .
                      mkdir -p ~/project/.circleci/ansible/roles/deploy/files
                      mv artifact.tar.gz .circleci/ansible/roles/deploy/files/artifact.tar.gz
                      cd .circleci/ansible
                      echo "Contents  of the inventory.txt file is -------"
                      cat inventory.txt
                      ansible-playbook -i inventory.txt deploy-backend.yml
            - destroy-environment:
                  workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
            - revert-migrations:
                  workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

    smoke-test:
        docker:
            - image: python:3.7-alpine3.11
        steps:
            - checkout
            - restore_cache:
                  keys: [backend-build]
            - attach_workspace:
                  at: .
            - run:
                  name: Install dependencies
                  command: |
                      apk add --update --no-cache  curl
                      pip install awscli
            - run:
                  name: Backend Smoke Test
                  command: |
                      export BACKEND_IP=$(
                      aws ec2 describe-instances \
                      --query 'Reservations[*].Instances[*].PublicIpAddress' \
                      --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                      --output text)
                      echo "${BACKEND_IP}"
                      export API_URL="http://${BACKEND_IP}:3030"
                      echo "API_URL = ${API_URL}"
                      if curl "${API_URL}/api/status" | grep -i "ok"
                      then
                          return 0
                      else
                          return 1
                      fi
            - run:
                  name: Frontend Smoke Test.
                  command: |
                      URL="http://udapeoplefrontend-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-${AWS_DEFAULT_REGION}.amazonaws.com/#/employees"
                      echo ${URL}
                      if curl -s  ${URL} | grep "Welcome"
                      then
                      return 0
                      else
                      return 0
                      fi
            - destroy-environment:
                  workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
            - revert-migrations:
                  workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

    cloudfront-update:
        docker:
            - image: amazon/aws-cli
        steps:
            - checkout
            - run:
                  name: Install dependencies
                  command: |
                      yum install -y tar gzip curl npm
                      curl -sL https://rpm.nodesource.com/setup_10.x | bash -
                      yum install -y nodejs
            - run:
                  name: Update cloudfront distribution
                  command: |
                      aws cloudformation deploy \
                      --template-file .circleci/files/cloudfront.yml \
                      --stack-name InitialStack \
                      --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
                      --tags project=udapeople
                  #   aws cloudformation deploy \
                  #   --template-file .circleci/files/cloudfront.yml \
                  #   --stack-name InitialStack \
                  #   --parameter-overrides NewWorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
                  #   --tags '[{"Key":"Project","Value":"udapeople"},{"Key":"Name", "Value":"udapeople"}]'
            - revert-migrations:
                  workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

    cleanup:
        docker:
            - image: amazon/aws-cli
        steps:
            - checkout
            - run:
                  name: Get the  old stack workflow id
                  command: |
                      export OldWorkflowID=$(aws cloudformation \
                      list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                      --no-paginate --output text)

                      echo OldWorkflowID: "${OldWorkflowID}"
                      echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"

                      export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                      --stack-status-filter CREATE_COMPLETE --no-paginate --output text))

                      echo Stack names: "${STACKS[@]}"
            - run:
                  name: Remove old stacks and files
                  command: |
                      if [[ "$CurrentWorkflowID" != "$OldWorkflowID" ]]
                      then
                          aws s3 rm "s3://newudapeople${OldWorkflowID}" --recursive
                          aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
                          aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
                      else
                          echo "$OldWorkflowID==$CurrentWorkflowID => all good."
                      fi

    notify:
        docker:
            - image: "cimg/base:stable"
        steps:
            - slack/notify:
                  custom: |
                      {
                          "blocks": [
                          {
                              "type": "section",
                              "fields": [
                              {
                                  "type": "plain_text",
                                  "text": "Jobs Upload successful",
                                  "emoji": true
                              }
                              ]
                          }
                          ]
                      }
                  event: always

workflows:
    default:
        jobs:
            # - build-frontend
            # - build-backend
            # - test-frontend:
            #       requires: [build-frontend]
            # - test-backend:
            #       requires: [build-backend]
            # - scan-backend:
            #       requires: [build-backend]
            # - scan-frontend:
            #       requires: [build-frontend]
            - deploy-infrastructure:
                  #   requires:
                  #       [test-frontend, test-backend, scan-frontend, scan-backend]
                  filters:
                      branches:
                          only: [master]
            - configure-infrastructure:
                  requires: [deploy-infrastructure]
            - run-migrations:
                  requires: [configure-infrastructure]
            - deploy-frontend:
                  requires: [run-migrations]
            - deploy-backend:
                  requires: [run-migrations]
            - smoke-test:
                  requires: [deploy-backend, deploy-frontend]
            # - cloudfront-update:
            #       requires: [smoke-test]
            # - cleanup:
            #       requires: [cloudfront-update]
            # - notify:
            #       context: CICD ALERT
            #       requires: [cleanup]
